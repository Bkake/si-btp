/**
 * This class is generated by jOOQ
 */
package com.si.btp.module.tiers.data.domain.tables;


import com.si.btp.module.tiers.data.converter.LocalDateConverter;
import com.si.btp.module.tiers.data.domain.Keys;
import com.si.btp.module.tiers.data.domain.Public;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contact extends TableImpl<Record> {

    private static final long serialVersionUID = 1018778896;

    /**
     * The reference instance of <code>PUBLIC.CONTACT</code>
     */
    public static final Contact CONTACT = new Contact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>PUBLIC.CONTACT.ID</code>.
     */
    public final TableField<Record, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONTACT.NOM</code>.
     */
    public final TableField<Record, String> NOM = createField("NOM", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>PUBLIC.CONTACT.PRENOM</code>.
     */
    public final TableField<Record, String> PRENOM = createField("PRENOM", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>PUBLIC.CONTACT.TELEPHONE</code>.
     */
    public final TableField<Record, String> TELEPHONE = createField("TELEPHONE", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

    /**
     * The column <code>PUBLIC.CONTACT.MOBILE</code>.
     */
    public final TableField<Record, String> MOBILE = createField("MOBILE", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

    /**
     * The column <code>PUBLIC.CONTACT.FAX</code>.
     */
    public final TableField<Record, String> FAX = createField("FAX", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

    /**
     * The column <code>PUBLIC.CONTACT.EMAIL</code>.
     */
    public final TableField<Record, String> EMAIL = createField("EMAIL", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>PUBLIC.CONTACT.DATE_OF_CREATE</code>.
     */
    public final TableField<Record, LocalDate> DATE_OF_CREATE = createField("DATE_OF_CREATE", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("CURRENT_DATE()", org.jooq.impl.SQLDataType.DATE)), this, "", new LocalDateConverter());

    /**
     * The column <code>PUBLIC.CONTACT.DATE_OF_UPDATE</code>.
     */
    public final TableField<Record, LocalDate> DATE_OF_UPDATE = createField("DATE_OF_UPDATE", org.jooq.impl.SQLDataType.DATE, this, "", new LocalDateConverter());

    /**
     * Create a <code>PUBLIC.CONTACT</code> table reference
     */
    public Contact() {
        this("CONTACT", null);
    }

    /**
     * Create an aliased <code>PUBLIC.CONTACT</code> table reference
     */
    public Contact(String alias) {
        this(alias, CONTACT);
    }

    private Contact(String alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Contact(String alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PK_CONTACT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.PK_CONTACT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Contact as(String alias) {
        return new Contact(alias, this);
    }

    /**
     * Rename this table
     */
    public Contact rename(String name) {
        return new Contact(name, null);
    }
}
