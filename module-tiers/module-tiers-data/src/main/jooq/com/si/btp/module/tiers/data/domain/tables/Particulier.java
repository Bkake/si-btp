/**
 * This class is generated by jOOQ
 */
package com.si.btp.module.tiers.data.domain.tables;


import com.si.btp.module.tiers.data.domain.Keys;
import com.si.btp.module.tiers.data.domain.Public;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Particulier extends TableImpl<Record> {

    private static final long serialVersionUID = -686556691;

    /**
     * The reference instance of <code>PUBLIC.PARTICULIER</code>
     */
    public static final Particulier PARTICULIER = new Particulier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>PUBLIC.PARTICULIER.ID</code>.
     */
    public final TableField<Record, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PARTICULIER.CODE</code>.
     */
    public final TableField<Record, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>PUBLIC.PARTICULIER.COMMENTAIRE</code>.
     */
    public final TableField<Record, String> COMMENTAIRE = createField("COMMENTAIRE", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>PUBLIC.PARTICULIER.CIVILITE</code>.
     */
    public final TableField<Record, String> CIVILITE = createField("CIVILITE", org.jooq.impl.SQLDataType.CHAR.length(4), this, "");

    /**
     * The column <code>PUBLIC.PARTICULIER.NOM</code>.
     */
    public final TableField<Record, String> NOM = createField("NOM", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>PUBLIC.PARTICULIER.PRENOM</code>.
     */
    public final TableField<Record, String> PRENOM = createField("PRENOM", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>PUBLIC.PARTICULIER.CATEGORIE_ID</code>.
     */
    public final TableField<Record, Integer> CATEGORIE_ID = createField("CATEGORIE_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.PARTICULIER.ADRESSE_ID</code>.
     */
    public final TableField<Record, Integer> ADRESSE_ID = createField("ADRESSE_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.PARTICULIER.CONTACT_ID</code>.
     */
    public final TableField<Record, Integer> CONTACT_ID = createField("CONTACT_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.PARTICULIER.CREATE_DATE</code>.
     */
    public final TableField<Record, Date> CREATE_DATE = createField("CREATE_DATE", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("CURRENT_DATE()", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>PUBLIC.PARTICULIER.UPDATE_DATE</code>.
     */
    public final TableField<Record, Date> UPDATE_DATE = createField("UPDATE_DATE", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * Create a <code>PUBLIC.PARTICULIER</code> table reference
     */
    public Particulier() {
        this("PARTICULIER", null);
    }

    /**
     * Create an aliased <code>PUBLIC.PARTICULIER</code> table reference
     */
    public Particulier(String alias) {
        this(alias, PARTICULIER);
    }

    private Particulier(String alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Particulier(String alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PK_PARTICULIER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.PK_PARTICULIER_ID, Keys.UNQ_PARTICULIER_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.FK_PARTICULIER_CATEGORIE, Keys.FK_PARTICULIER_ADRESSE, Keys.FK_PARTICULIER_CONTACT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Particulier as(String alias) {
        return new Particulier(alias, this);
    }

    /**
     * Rename this table
     */
    public Particulier rename(String name) {
        return new Particulier(name, null);
    }
}
